%!PS-Adobe-2.0
%%Title: force.ps
%%Creator: gnuplot 4.0 patchlevel 0
%%CreationDate: Thu Sep 22 16:09:09 2016
%%DocumentFonts: (atend)
%%BoundingBox: 50 50 554 482
%%Orientation: Portrait
%%Pages: (atend)
%%EndComments
/gnudict 256 dict def
gnudict begin
/Color false def
/Solid false def
/gnulinewidth 5.000 def
/userlinewidth gnulinewidth def
/vshift -46 def
/dl {10.0 mul} def
/hpt_ 31.5 def
/vpt_ 31.5 def
/hpt hpt_ def
/vpt vpt_ def
/Rounded false def
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/N {newpath moveto} bind def
/C {setrgbcolor} bind def
/f {rlineto fill} bind def
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow { currentpoint stroke M
  0 vshift R show } def
/Rshow { currentpoint stroke M
  dup stringwidth pop neg vshift R show } def
/Cshow { currentpoint stroke M
  dup stringwidth pop -2 div vshift R show } def
/UP { dup vpt_ mul /vpt exch def hpt_ mul /hpt exch def
  /hpt2 hpt 2 mul def /vpt2 vpt 2 mul def } def
/DL { Color {setrgbcolor Solid {pop []} if 0 setdash }
 {pop pop pop 0 setgray Solid {pop []} if 0 setdash} ifelse } def
/BL { stroke userlinewidth 2 mul setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/AL { stroke userlinewidth 2 div setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/UL { dup gnulinewidth mul /userlinewidth exch def
      dup 1 lt {pop 1} if 10 mul /udl exch def } def
/PL { stroke userlinewidth setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/LTw { PL [] 1 setgray } def
/LTb { BL [] 0 0 0 DL } def
/LTa { AL [1 udl mul 2 udl mul] 0 setdash 0 0 0 setrgbcolor } def
/LT0 { PL [] 1 0 0 DL } def
/LT1 { PL [4 dl 2 dl] 0 1 0 DL } def
/LT2 { PL [2 dl 3 dl] 0 0 1 DL } def
/LT3 { PL [1 dl 1.5 dl] 1 0 1 DL } def
/LT4 { PL [5 dl 2 dl 1 dl 2 dl] 0 1 1 DL } def
/LT5 { PL [4 dl 3 dl 1 dl 3 dl] 1 1 0 DL } def
/LT6 { PL [2 dl 2 dl 2 dl 4 dl] 0 0 0 DL } def
/LT7 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 1 0.3 0 DL } def
/LT8 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 0.5 0.5 0.5 DL } def
/Pnt { stroke [] 0 setdash
   gsave 1 setlinecap M 0 0 V stroke grestore } def
/Dia { stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  Pnt } def
/Pls { stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
  } def
/Box { stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  Pnt } def
/Crs { stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke } def
/TriU { stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  Pnt  } def
/Star { 2 copy Pls Crs } def
/BoxF { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V  hpt2 0 V  0 vpt2 V
  hpt2 neg 0 V  closepath fill } def
/TriUF { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath fill } def
/TriD { stroke [] 0 setdash 2 copy vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke
  Pnt  } def
/TriDF { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath fill} def
/DiaF { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath fill } def
/Pent { stroke [] 0 setdash 2 copy gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore Pnt } def
/PentF { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath fill grestore } def
/Circle { stroke [] 0 setdash 2 copy
  hpt 0 360 arc stroke Pnt } def
/CircleF { stroke [] 0 setdash hpt 0 360 arc fill } def
/C0 { BL [] 0 setdash 2 copy moveto vpt 90 450  arc } bind def
/C1 { BL [] 0 setdash 2 copy        moveto
       2 copy  vpt 0 90 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C2 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C3 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C4 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C5 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 90 arc
       2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc } bind def
/C6 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 90 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C7 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 0 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C8 { BL [] 0 setdash 2 copy moveto
      2 copy vpt 270 360 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C9 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 270 450 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C10 { BL [] 0 setdash 2 copy 2 copy moveto vpt 270 360 arc closepath fill
       2 copy moveto
       2 copy vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C11 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
       2 copy moveto
       2 copy  vpt 270 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C12 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C13 { BL [] 0 setdash  2 copy moveto
       2 copy  vpt 0 90 arc closepath fill
       2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C14 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 360 arc closepath fill
               vpt 0 360 arc } bind def
/C15 { BL [] 0 setdash 2 copy vpt 0 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/Rec   { newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
       neg 0 rlineto closepath } bind def
/Square { dup Rec } bind def
/Bsquare { vpt sub exch vpt sub exch vpt2 Square } bind def
/S0 { BL [] 0 setdash 2 copy moveto 0 vpt rlineto BL Bsquare } bind def
/S1 { BL [] 0 setdash 2 copy vpt Square fill Bsquare } bind def
/S2 { BL [] 0 setdash 2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S3 { BL [] 0 setdash 2 copy exch vpt sub exch vpt2 vpt Rec fill Bsquare } bind def
/S4 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S5 { BL [] 0 setdash 2 copy 2 copy vpt Square fill
       exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S6 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S7 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill
       2 copy vpt Square fill
       Bsquare } bind def
/S8 { BL [] 0 setdash 2 copy vpt sub vpt Square fill Bsquare } bind def
/S9 { BL [] 0 setdash 2 copy vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S10 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt Square fill
       Bsquare } bind def
/S11 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt2 vpt Rec fill
       Bsquare } bind def
/S12 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill Bsquare } bind def
/S13 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy vpt Square fill Bsquare } bind def
/S14 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S15 { BL [] 0 setdash 2 copy Bsquare fill Bsquare } bind def
/D0 { gsave translate 45 rotate 0 0 S0 stroke grestore } bind def
/D1 { gsave translate 45 rotate 0 0 S1 stroke grestore } bind def
/D2 { gsave translate 45 rotate 0 0 S2 stroke grestore } bind def
/D3 { gsave translate 45 rotate 0 0 S3 stroke grestore } bind def
/D4 { gsave translate 45 rotate 0 0 S4 stroke grestore } bind def
/D5 { gsave translate 45 rotate 0 0 S5 stroke grestore } bind def
/D6 { gsave translate 45 rotate 0 0 S6 stroke grestore } bind def
/D7 { gsave translate 45 rotate 0 0 S7 stroke grestore } bind def
/D8 { gsave translate 45 rotate 0 0 S8 stroke grestore } bind def
/D9 { gsave translate 45 rotate 0 0 S9 stroke grestore } bind def
/D10 { gsave translate 45 rotate 0 0 S10 stroke grestore } bind def
/D11 { gsave translate 45 rotate 0 0 S11 stroke grestore } bind def
/D12 { gsave translate 45 rotate 0 0 S12 stroke grestore } bind def
/D13 { gsave translate 45 rotate 0 0 S13 stroke grestore } bind def
/D14 { gsave translate 45 rotate 0 0 S14 stroke grestore } bind def
/D15 { gsave translate 45 rotate 0 0 S15 stroke grestore } bind def
/DiaE { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke } def
/BoxE { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke } def
/TriUE { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke } def
/TriDE { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke } def
/PentE { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore } def
/CircE { stroke [] 0 setdash 
  hpt 0 360 arc stroke } def
/Opaque { gsave closepath 1 setgray fill grestore 0 setgray closepath } def
/DiaW { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V Opaque stroke } def
/BoxW { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V Opaque stroke } def
/TriUW { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V Opaque stroke } def
/TriDW { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V Opaque stroke } def
/PentW { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  Opaque stroke grestore } def
/CircW { stroke [] 0 setdash 
  hpt 0 360 arc Opaque stroke } def
/BoxFill { gsave Rec 1 setgray fill grestore } def
/BoxColFill {
  gsave Rec
  /Fillden exch def
  currentrgbcolor
  /ColB exch def /ColG exch def /ColR exch def
  /ColR ColR Fillden mul Fillden sub 1 add def
  /ColG ColG Fillden mul Fillden sub 1 add def
  /ColB ColB Fillden mul Fillden sub 1 add def
  ColR ColG ColB setrgbcolor
  fill grestore } def
%
% PostScript Level 1 Pattern Fill routine
% Usage: x y w h s a XX PatternFill
%	x,y = lower left corner of box to be filled
%	w,h = width and height of box
%	  a = angle in degrees between lines and x-axis
%	 XX = 0/1 for no/yes cross-hatch
%
/PatternFill { gsave /PFa [ 9 2 roll ] def
    PFa 0 get PFa 2 get 2 div add PFa 1 get PFa 3 get 2 div add translate
    PFa 2 get -2 div PFa 3 get -2 div PFa 2 get PFa 3 get Rec
    gsave 1 setgray fill grestore clip
    currentlinewidth 0.5 mul setlinewidth
    /PFs PFa 2 get dup mul PFa 3 get dup mul add sqrt def
    0 0 M PFa 5 get rotate PFs -2 div dup translate
	0 1 PFs PFa 4 get div 1 add floor cvi
	{ PFa 4 get mul 0 M 0 PFs V } for
    0 PFa 6 get ne {
	0 1 PFs PFa 4 get div 1 add floor cvi
	{ PFa 4 get mul 0 2 1 roll M PFs 0 V } for
    } if
    stroke grestore } def
%
/Symbol-Oblique /Symbol findfont [1 0 .167 1 0 0] makefont
dup length dict begin {1 index /FID eq {pop pop} {def} ifelse} forall
currentdict end definefont pop
/MFshow {
   { dup 5 get 3 ge
     { 5 get 3 eq {gsave} {grestore} ifelse }
     {dup dup 0 get findfont exch 1 get scalefont setfont
     [ currentpoint ] exch dup 2 get 0 exch R dup 5 get 2 ne {dup dup 6
     get exch 4 get {show} {stringwidth pop 0 R} ifelse }if dup 5 get 0 eq
     {dup 3 get {2 get neg 0 exch R pop} {pop aload pop M} ifelse} {dup 5
     get 1 eq {dup 2 get exch dup 3 get exch 6 get stringwidth pop -2 div
     dup 0 R} {dup 6 get stringwidth pop -2 div 0 R 6 get
     show 2 index {aload pop M neg 3 -1 roll neg R pop pop} {pop pop pop
     pop aload pop M} ifelse }ifelse }ifelse }
     ifelse }
   forall} bind def
/MFwidth {0 exch {dup 3 get{dup dup 0 get findfont exch 1 get scalefont
     setfont 6 get stringwidth pop add} {pop} ifelse} forall} bind def
/MLshow { currentpoint stroke M
  0 exch R MFshow } bind def
/MRshow { currentpoint stroke M
  exch dup MFwidth neg 3 -1 roll R MFshow } def
/MCshow { currentpoint stroke M
  exch dup MFwidth -2 div 3 -1 roll R MFshow } def
end
%%EndProlog
%%Page: 1 1
gnudict begin
gsave
50 50 translate
0.100 0.100 scale
0 setgray
newpath
(Helvetica) findfont 140 scalefont setfont
1.000 UL
LTb
714 420 M
63 0 V
4025 0 R
-63 0 V
stroke
630 420 M
gsave 0 setgray
[ [(Helvetica) 140.0 0.0 true true 0 ( 0)]
] -46.7 MRshow
grestore
1.000 UL
LTb
714 934 M
63 0 V
4025 0 R
-63 0 V
stroke
630 934 M
gsave 0 setgray
[ [(Helvetica) 140.0 0.0 true true 0 ( 50)]
] -46.7 MRshow
grestore
1.000 UL
LTb
714 1448 M
63 0 V
4025 0 R
-63 0 V
stroke
630 1448 M
gsave 0 setgray
[ [(Helvetica) 140.0 0.0 true true 0 ( 100)]
] -46.7 MRshow
grestore
1.000 UL
LTb
714 1962 M
63 0 V
4025 0 R
-63 0 V
stroke
630 1962 M
gsave 0 setgray
[ [(Helvetica) 140.0 0.0 true true 0 ( 150)]
] -46.7 MRshow
grestore
1.000 UL
LTb
714 2475 M
63 0 V
4025 0 R
-63 0 V
stroke
630 2475 M
gsave 0 setgray
[ [(Helvetica) 140.0 0.0 true true 0 ( 200)]
] -46.7 MRshow
grestore
1.000 UL
LTb
714 2989 M
63 0 V
4025 0 R
-63 0 V
stroke
630 2989 M
gsave 0 setgray
[ [(Helvetica) 140.0 0.0 true true 0 ( 250)]
] -46.7 MRshow
grestore
1.000 UL
LTb
714 3503 M
63 0 V
4025 0 R
-63 0 V
stroke
630 3503 M
gsave 0 setgray
[ [(Helvetica) 140.0 0.0 true true 0 ( 300)]
] -46.7 MRshow
grestore
1.000 UL
LTb
714 420 M
0 63 V
0 3277 R
0 -63 V
stroke
714 280 M
gsave 0 setgray
[ [(Helvetica) 140.0 0.0 true true 0 ( 0)]
] -46.7 MCshow
grestore
1.000 UL
LTb
1643 420 M
0 63 V
0 3277 R
0 -63 V
stroke
1643 280 M
gsave 0 setgray
[ [(Helvetica) 140.0 0.0 true true 0 ( 0.005)]
] -46.7 MCshow
grestore
1.000 UL
LTb
2572 420 M
0 63 V
0 3277 R
0 -63 V
stroke
2572 280 M
gsave 0 setgray
[ [(Helvetica) 140.0 0.0 true true 0 ( 0.01)]
] -46.7 MCshow
grestore
1.000 UL
LTb
3501 420 M
0 63 V
0 3277 R
0 -63 V
stroke
3501 280 M
gsave 0 setgray
[ [(Helvetica) 140.0 0.0 true true 0 ( 0.015)]
] -46.7 MCshow
grestore
1.000 UL
LTb
4430 420 M
0 63 V
0 3277 R
0 -63 V
stroke
4430 280 M
gsave 0 setgray
[ [(Helvetica) 140.0 0.0 true true 0 ( 0.02)]
] -46.7 MCshow
grestore
1.000 UL
LTb
1.000 UL
LTb
714 420 M
4088 0 V
0 3340 V
-4088 0 V
714 420 L
LTb
140 2090 M
gsave 0 setgray
currentpoint gsave translate 90 rotate 0 0 moveto
[ [(Helvetica) 140.0 0.0 true true 0 (Force, )]
[(Times-Italic) 140.0 0.0 true true 0 (F)]
[(Helvetica) 112.0 -42.0 true true 0 (A)]
[(Helvetica) 140.0 0.0 true true 0 (, \(kN\))]
] -32.7 MCshow
grestore
grestore
LTb
2758 70 M
gsave 0 setgray
[ [(Helvetica) 140.0 0.0 true true 0 (Deflection, )]
[(Symbol) 140.0 0.0 true true 0 (D)]
[(Helvetica) 112.0 -42.0 true true 0 (x)]
[(Helvetica) 140.0 0.0 true true 0 ( \(m\))]
] -32.7 MCshow
grestore
LTb
2758 4110 M
gsave 0 setgray
[ [(Helvetica) 140.0 0.0 true true 0 (Force Deflection Data )]
] -46.7 MCshow
grestore
2758 3970 M
gsave 0 setgray
[ [(Helvetica) 140.0 0.0 true true 0 ( and curve fit)]
] -46.7 MCshow
grestore
1.500 UP
LTb
1271 3092 M
gsave 0 setgray
[ [(Helvetica) 140.0 0.0 true true 0 (Yield Point)]
] -46.7 MLshow
grestore
1.000 UL
LT0
1284 3206 M
-13 92 V
-34 -86 V
-3 -223 R
37 309 V
stroke
3098 1962 M
gsave 0 setgray
[ [(Helvetica) 140.0 0.0 true true 0 (F\(x\) = A tanh \(x/B\))]
] -46.7 MCshow
grestore
1.500 UP
1.000 UL
LT2
LTb
3975 1822 M
gsave 0 setgray
[ [(Helvetica) 140.0 0.0 true true 0 (Column data)]
] -46.7 MRshow
grestore
LT2
714 420 Star
900 1489 Star
1086 2496 Star
1271 3483 Star
1290 3400 Star
1457 3390 Star
1476 3411 Star
1643 3606 Star
2572 3616 Star
4430 3298 Star
4274 1822 Star
1.500 UP
1.000 UL
LT3
LTb
3975 1682 M
gsave 0 setgray
[ [(Helvetica) 140.0 0.0 true true 0 (Beam data)]
] -46.7 MRshow
grestore
LT3
714 420 Box
900 944 Box
1086 1458 Box
1271 1941 Box
1290 1951 Box
1457 2486 Box
1476 2568 Box
1643 2989 Box
2572 3092 Box
4430 2886 Box
4274 1682 Box
1.000 UL
LT2
LTb
3975 1542 M
gsave 0 setgray
[ [(Helvetica) 140.0 0.0 true true 0 (Column-fit: A=309, B=0.00227)]
] -46.7 MRshow
grestore
LT2
4059 1542 M
430 0 V
714 420 M
41 310 V
42 304 V
41 293 V
41 277 V
41 257 V
42 236 V
41 212 V
41 189 V
42 167 V
41 145 V
41 124 V
42 107 V
41 91 V
41 77 V
41 65 V
42 54 V
41 46 V
41 38 V
42 31 V
41 26 V
41 22 V
41 18 V
42 14 V
41 12 V
41 11 V
42 8 V
41 7 V
41 5 V
41 5 V
42 4 V
41 3 V
41 2 V
42 3 V
41 1 V
41 2 V
42 1 V
41 1 V
41 1 V
41 0 V
42 1 V
41 0 V
41 1 V
42 0 V
41 0 V
41 0 V
41 1 V
42 0 V
41 0 V
41 0 V
42 0 V
41 0 V
41 0 V
42 0 V
41 0 V
41 0 V
41 0 V
42 0 V
41 0 V
41 0 V
42 0 V
41 0 V
41 0 V
41 0 V
42 0 V
41 0 V
41 0 V
42 0 V
41 0 V
41 0 V
42 0 V
41 0 V
41 0 V
41 0 V
42 0 V
41 0 V
41 0 V
42 0 V
41 0 V
41 0 V
41 0 V
42 0 V
41 0 V
41 0 V
42 0 V
41 0 V
41 0 V
41 0 V
42 0 V
41 0 V
41 0 V
42 0 V
41 0 V
41 0 V
42 0 V
41 0 V
41 0 V
41 0 V
42 0 V
41 0 V
1.000 UL
LT3
LTb
3975 1402 M
gsave 0 setgray
[ [(Helvetica) 140.0 0.0 true true 0 (Beam-fit: A=260, B=0.00415)]
] -46.7 MRshow
grestore
LT3
4059 1402 M
430 0 V
714 420 M
41 143 V
42 142 V
41 140 V
41 138 V
41 135 V
42 131 V
41 127 V
41 122 V
42 117 V
41 111 V
41 106 V
42 100 V
41 94 V
41 88 V
41 83 V
42 77 V
41 71 V
41 66 V
42 61 V
41 56 V
41 52 V
41 47 V
42 44 V
41 39 V
41 36 V
42 33 V
41 30 V
41 27 V
41 25 V
42 22 V
41 21 V
41 18 V
42 17 V
41 15 V
41 13 V
42 13 V
41 11 V
41 10 V
41 9 V
42 8 V
41 7 V
41 7 V
42 6 V
41 5 V
41 5 V
41 4 V
42 4 V
41 4 V
41 3 V
42 3 V
41 2 V
41 2 V
42 3 V
41 1 V
41 2 V
41 2 V
42 1 V
41 1 V
41 1 V
42 1 V
41 1 V
41 1 V
41 1 V
42 0 V
41 1 V
41 0 V
42 1 V
41 0 V
41 1 V
42 0 V
41 0 V
41 0 V
41 1 V
42 0 V
41 0 V
41 0 V
42 0 V
41 1 V
41 0 V
41 0 V
42 0 V
41 0 V
41 0 V
42 0 V
41 0 V
41 0 V
41 0 V
42 0 V
41 0 V
41 1 V
42 0 V
41 0 V
41 0 V
42 0 V
41 0 V
41 0 V
41 0 V
42 0 V
41 0 V
1.000 UL
LTb
714 420 M
4088 0 V
0 3340 V
-4088 0 V
714 420 L
1.500 UP
stroke
grestore
end
showpage
%%Trailer
%%DocumentFonts: Symbol Times-Italic Helvetica
%%Pages: 1
